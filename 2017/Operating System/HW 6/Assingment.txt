/*
This program does the following.
1) Create handlers for two signals.
2) Create an idle process which will be executed when there is nothing
else to do.
3) Create a send_signals process that sends a SIGALRM every so often

When run, it should produce the following output (approximately):

$ ./a.out
in CPU.cc at 247 main pid = 26428
state: 1
name:  IDLE
pid:   26430
ppid:  0
slices:   0
switches: 0
started:  0
in CPU.cc at 100 at beginning of send_signals getpid () = 26429
in CPU.cc at 216 idle getpid () = 26430
in CPU.cc at 222 going to sleep
in CPU.cc at 106 sending signal = 14
in CPU.cc at 107 to pid = 26428
in CPU.cc at 148 stopped running->pid = 26430
in CPU.cc at 155 continuing tocont->pid = 26430
in CPU.cc at 106 sending signal = 14
in CPU.cc at 107 to pid = 26428
in CPU.cc at 148 stopped running->pid = 26430
in CPU.cc at 155 continuing tocont->pid = 26430
in CPU.cc at 106 sending signal = 14
in CPU.cc at 107 to pid = 26428
in CPU.cc at 115 at end of send_signals
Terminated
---------------------------------------------------------------------------
Add the following functionality.
1) Change the NUM_SECONDS to 20.

2) Take any number of arguments for executables, and place each on new_list.
The executable will not require arguments themselves.

3) When a SIGALRM arrives, scheduler() will be called. It calls
choose_process which currently always returns the idle process. Do the
following.
a) Update the PCB for the process that was interrupted including the
number of context switches and interrupts it had, and changing its
state from RUNNING to READY.
b) If there are any processes on the new_list, do the following.
i) Take the one off the new_list and put it on the processes list.
ii) Change its state to RUNNING, and fork() and execl() it.
c) Modify choose_process to round robin the processes in the processes
queue that are READY. If no process is READY in the queue, execute
the idle process.

4) When a SIGCHLD arrives notifying that a child has exited, process_done() is
called. process_done() currently only prints out the PID and the status.
a) Add the printing of the information in the PCB including the number
of times it was interrupted, the number of times it was context
switched (this may be fewer than the interrupts if a process
becomes the only non-idle process in the ready queue), and the total
system time the process took.
b) Change the state to TERMINATED.
c) Start the idle process to use the rest of the time slice.
*/
